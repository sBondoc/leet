#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 16
#define SUM 7

void sort_merge_merge(int arr[], int p, int q, int r)
{
	int size_left = q - p + 1, size_right = r - q;
	int left[size_left], right[size_right];
	memcpy(&left, &arr[p], size_left * sizeof(int));
	memcpy(&right, &arr[q + 1], size_right * sizeof(int));
	int i = p, j = q + 1, k;
}

void sort_merge(int arr[], int p, int r)
{
	if (1 < r - p)
	{
		int q = (p + r) / 2;
		sort_merge(arr, p, q);
		sort_merge(arr, q + 1, r);
		sort_merge_merge(arr, p, q, r);
	}
}

int *sum_present(int *arr, int size, int n, int *size_return)
{
	int *ret = (int *) malloc(2 * sizeof(int));
	for (int i = 0; i < size; i++)
	{
		for (int j = 0; j < size; j++)
		{
			if (arr[i] + arr[j] == n)
			{
				ret[0] = i;
				ret[1] = j;
				return ret;
			}
		}
	}
	ret[0] = -1;
	ret[1] = -1;
	return ret;
}

int main(int argc, char *argv[])
{
	int arr[SIZE] = {9, 7, 2, 3, 0, 3, 4, 3, 9, 8, 1, 7, 6, 3, 2, 5};
	int n = 2;
	int *indices = sum_present(arr, SIZE, SUM, &n);
	printf("arr[%d] + arr[%d] = %d + %d = %d\n", indices[0], indices[1], arr[indices[0]], arr[indices[1]], SUM);
	free(indices);
	return EXIT_SUCCESS;
}
